#include<stdio.h>        //标准的输入输出函数文件头部说明
#include<math.h>              // 数学函数头部说明
#include<string.h>
#include<stdlib.h>    //通过该函数头部里的函数，改变控制台的背景和颜色
#include<windows.h>    //头文件声明，下文用到了改变控制台的宽度和高度
#define M 100            //宏定义说明
struct student     //结构体定义并声明
{
    char name[25];     //姓名
    char num[25];     //学号
    int special;     //专业
    int banji;      //班级
    int math,yy,xd,cyy,pe;   //数学、英语、线代、C语言、体育
    double sum;
};
//****************************************函数的声明********************************************
void input(struct student stu[M]);     //输入函数
void output(struct student stu[M]);     //各类用户自定义函数的声明
void lookfor(struct student stu[M]);    //查询函数
void modify(struct student stu[M]);     //修改函数
void order(struct student stu[M]);     //排序函数
void delete_student(struct student stu[M]);   //删除函数
void xuehao(struct student stu[M]);
void xingming(struct student stu[M]);
void yanshi(char *p);        //延时函数说明
//**********************************************************************************************
int count=0;
struct student t;
int main()
{
    int choice,sum;
    struct student stu[M];
    system("mode con:cols=400 lines=30000");        //调节控制台的宽度和高度
  //  system("color 1d");      //调节控制台的背景和字体颜色
point1:
    sum=0;
    yanshi("\t\t\t\t\t\t\t\t\3\3\3\3\3\3\3\3\3\3\3\3欢迎你使用学生成绩管理系统\3\3\3\3\3\3\3\3\3\3\n");
    do
    {
        printf("\t\t\t\t\t\t\t\t-------------------------------------------------\n");
        printf("\t\t\t\t\t\t\t\t\t+       学生成绩管理系统            +\n");
        printf("\t\t\t\t\t\t\t\t-------------------------------------------------\n");
        printf("\t\t\t\t\t\t\t\t\t\t软件一班   赵希玥             \n");
        printf("\t\t\t\t\t\t\t\t\t\t ***************\n");
        printf("\t\t\t\t\t\t\t\t\t\t 1、添加学生成绩\n");
        printf("\t\t\t\t\t\t\t\t\t\t 2、浏览学生成绩\n");
        printf("\t\t\t\t\t\t\t\t\t\t 3、查询学生成绩\n");
        printf("\t\t\t\t\t\t\t\t\t\t 4、修改学生成绩\n");
        printf("\t\t\t\t\t\t\t\t\t\t 5、删除学生成绩\n");
        printf("\t\t\t\t\t\t\t\t\t\t 6、排列学生成绩\n");
        printf("\t\t\t\t\t\t\t\t\t\t 7、退出系统\n");
        printf("\t\t\t\t\t\t\t\t\t\t ***************\n");
        printf("请输入你的选择\n");
        scanf("%d",&choice);
        fflush(stdin);       //清除输入缓冲区
        if(choice>7||choice<=0)
        {
            sum++;
            if(sum>=5)
            {
                printf("输入错误次数过多,程序将重新开始\n");
                system("pause");        //程序暂停
                system("cls");   //清屏语句
                goto point1;
            }
        }
        switch(choice)        //根据选择，调用不同的函数来完成不同的任务
        {
            case 1:
                input(stu);
                break;
            case 2:
                output(stu);
                break;
            case 3:
                lookfor(stu);
                break;
            case 4:
                modify(stu);
                break;
            case 5:
                delete_student(stu);
                break;
            case 6:
                order(stu);
                break;
            case 7:
                printf("感谢你使用学生成绩管理系统,请关掉程序!!!\n");
                system("pause");
                break;
            default:
                printf("无效的选择!!!请重新输入!!!\n");
                break;
        }
    }
    while(choice!=7);
    printf("the program is over!!!\n");
    return 0;
}
void input(struct student stu[M])      //自定义输入函数
{
    int len,size;//len 是长度
    system("cls");
    printf("请添加要输入学生的信息\n");
    do
    {
        printf("请输入由11位数字组成的学生学号\n");   //do-while循环应用，提示输入位数为一确定数
        scanf("%s",&stu[count].num);
        len=strlen(stu[count].num);
    }
    while(len!=11);
    printf("请输入同学的姓名\n");
    scanf("%s",stu[count].name);
    printf("请输入所需要的专业代号：1、软件工程 2、集成电路 3、物联网工程\n");  //采用如此方法解决了专业输入难问题
    scanf("%d",&stu[count].special);
    printf("请输入对应的学生班级号码:1、一班 2、二班 3、三班 4、四班 5、五班 6、六班 7、七班 8、八班 9、九班\n");
    scanf("%d",&stu[count].banji);
    do
    {
        printf("请依次输入不大于100的学生各科成绩：高数、英语、线代、C语言、体育\n");
        scanf("%d%d%d%d%d",&stu[count].math,&stu[count].yy,&stu[count].xd,&stu[count].cyy,&stu[count].pe);
    }
    while(stu[count].math>100||stu[count].yy>100||stu[count].xd>100||stu[count].cyy>100||stu[count].pe>100);    //同上同上
    stu[count].sum=(stu[count].math+stu[count].yy+stu[count].xd+stu[count].cyy+stu[count].pe);       //求出总和
    count++;
}
void output(struct student stu[M])     //自定义输出函数
{
    int j;
    system("cls");
    if(count==0)
    {
        printf("当前已存学生信息为0个\n");
        return;
    }
    for(j=0; j<count; j++)
    {
        printf("学号\t\t 姓名\t专业\t\t班级\t高数\t英语\t线代\tC语言\t体育\t总分\n");
        for(j=0; j<count; j++)       //for循环控制输出的个数
        {
            printf("%s\t",stu[j].num);
            printf("%s\t",stu[j].name);
            if(stu[j].special==1)
                printf("软件工程\t");
            else if(stu[j].special==2)
                printf("集成电路\t");
            else
                printf("物联网工程\t");
            printf("%d\t",stu[j].banji);
            printf("%d\t",stu[j].math);
            printf("%d\t",stu[j].yy);
            printf("%d\t",stu[j].xd);
            printf("%d\t",stu[j].cyy);
            printf("%d\t",stu[j].pe);
            printf("%.1lf\t\n",stu[j].sum);
        }
    }
}
void lookfor(struct student stu[M])                   //自定义查询学生信息函数
{
    int q = 0;
    int j,flag=0;
    char xh[25];
    system("cls");
    if(count==0)
    {
        printf("当前已存学生信息为0个,无法查询!!!\n");
        return;
    }
    else
    {
        printf("请输入你想要查看的同学学号\n");
        scanf("%s",&xh);
        fflush(stdin);
        for(j=0; j<count; j++)
        {
            if(strcmp(stu[j].num,xh)==0)        //通过字符函数对已存入的学生信息进行比较,找出要查看的学生
            {
                printf("学号\t\t姓名\t专业\t\t班级\t高数\t英语\t线代\tC语言\t体育\t总分\n");
                printf("%s\t",stu[j].num);
                printf("%s\t",stu[j].name);
                if(stu[j].special==1)
                    printf("软件工程\t");
                else if(stu[j].special==2)
                    printf("集成电路\t");
                else
                    printf("物联网工程\t");
                printf("%d\t",stu[j].banji);     //考虑一个对齐的因数
                printf("%d\t",stu[j].math);
                printf("%d\t",stu[j].yy);
                printf("%d\t",stu[j].xd);
                printf("%d\t",stu[j].cyy);
                printf("%d\t",stu[j].pe);
                printf("%.1lf\t",stu[j].sum);
                flag = 1;
            }
        }
    }
    if(flag==0)
        printf("很抱歉,没有你所需要的学生信息\n");
}
void modify(struct student stu[M])    //自定义修改函数
{
    int j,flag=0,course;
    char xh[25];
    system("cls");
    if(count==0)
    {
        printf("当前已存学生信息为0个,无法修改!!!\n");
        return;
    }
    else
    {
        printf("请输入你想要修改的同学学号\n");
        scanf("%s",&xh);
        fflush(stdin);
        for(j=0; j<count; j++)
            if(strcmp(stu[j].num,xh)==0)         //同上
            {
                printf("你确定要修改学生的信息吗???如果不确定的话,请关掉本程序吧!!!\n");
                printf("选择课程: 1、高数 2、英语 3、线代 4、C语言 5、体育\n");
                scanf("%d",&course);
                printf("请输入你想要修改后的学生成绩\n");
                switch(course)
                {
                    case 1:
                        scanf("%d",&stu[j].math);
                        break;
                    case 2:
                        scanf("%d",&stu[j].yy);
                        break;        //switch控制语句
                    case 3:
                        scanf("%d",&stu[j].xd);
                        break;
                    case 4:
                        scanf("%d",&stu[j].cyy);
                        break;
                    case 5:
                        scanf("%d",&stu[j].pe);
                        break;
                    default:
                        printf("无效的选择!!!请重新输入!!!\n");
                        break;
                }
            }
    }
}
void delete_student(struct student stu[M])        //自定义删除函数
{
    int choice;
    system("cls");
    if(count==0)
    {
        printf("当前已存学生信息为0个,无法删除!!!\n");
        return;
    }
    else
    {
        printf("请选择你所要删除的方式:1、学号  2、取消\n");
        scanf("%d",&choice);
        switch(choice)            //switch语句对用户要删除的方式进行选择
        {
            case 2:
                return;
                break;
            case 1:
                xuehao(stu);
                break;
            default:
                printf("无效的选择!!!请重新输入!!!\n");
                break;
        }
    }
}
void order(struct student stu[M])        //排序函数的定义
{
    int j,k,choice,index;
    system("cls");
    printf("请输入你想要进行排序的方式(所有排序的方式均是降序)!!!\n");
    printf("1、高数 2、英语 3、线代 4、C语言 5、体育 6、总分\n");
    scanf("%d",&choice);
    switch(choice)
    {
        case 1:
            for(j=0; j<count; j++)
            {
                index=j;
                for(k=j+1; k<count; k++)
                    if(stu[k].math>stu[index].math)
                    {
                        t=stu[k];
                        stu[k]=stu[index];
                        stu[index]=t;
                    }
            };
            break;
        case 2:
            for(j=0; j<count; j++)
            {
                index=j;
                for(k=j+1; k<count; k++)
                    if(stu[k].yy>stu[index].yy)
                    {
                        stu[k]=stu[index];   //整个为排序部分,采用了所谓的选择排序的方法
                    }
            };
            break;
        case 3:
            for(j=0; j<count; j++)
            {
                index=j;
                for(k=j+1; k<count; k++)
                    if(stu[k].xd>stu[index].xd)
                    {
                        t=stu[k];
                        stu[k]=stu[index];
                        stu[index]=t;
                    }
            };
            break;
        case 4:
            for(j=0; j<count; j++)
            {
                index=j;
                for(k=j+1; k<count; k++)
                    if(stu[k].cyy>stu[index].cyy)
                    {
                        t=stu[k];
                        stu[k]=stu[index];
                        stu[index]=t;
                    }
            };
            break;
        case 5:
            for(j=0; j<count; j++)
            {
                index=j;
                for(k=j+1; k<count; k++)
                    if(stu[k].pe>stu[index].pe)
                    {
                        t=stu[k];
                        stu[k]=stu[index];
                        stu[index]=t;
                    }
            };
            break;
        case 6:
            for(j=0; j<count; j++)
            {
                index=j;
                for(k=j+1; k<count; k++)
                    if(stu[k].sum>stu[index].sum)
                    {
                        t=stu[k];    //强制类型转换符号只能用于有操作数，根据赋值运算中的类型转换问题可知
                        stu[k]=stu[index];
                        stu[index]=t;
                    }
            };
            break;
        default:
            printf("无效的选择!!!请重新输入!!!\n");
            break;
    }
}
void xuehao(struct student stu[M])           //自定义通过学号方式删除学生信息函数
{
    int j,index=0,k=count;
    char xh[25];
    system("cls");
    printf("请输入你想要删除的同学学号\n");
    scanf("%s",xh);
    fflush(stdin);
    for(j=0; j<count; j++)
    {
        if(strcmp(stu[j].num,xh)==0)
        {
            for(j=index; j<count; j++)
                stu[j]=stu[j+1];
            count--;
            if(count<k)
                printf("你已经删除成功\n");
        }
        index++;
    }
    if(j==count)
        printf("抱歉!!!没有你所需要删除的学生信息!*_*!\n");
}
void xingming(struct student stu[M])           //自定义通过姓名方式删除学生信息函数
{
    int flag=0,j,k=count;
    char xm[25];
    system("cls");
    printf("请输入你想要删除的同学姓名\n");
    scanf("%s",xm);
    fflush(stdin);
    for(j=0; j<count; j++)
    {
        if(strcmp(stu[j].num,xm)==0)
        {
            for(j=flag-1; j<count; j++)
                stu[j]=stu[j+1];
            count--;
            if(count<k)
                printf("你已经删除成功\n");
        }
        flag++;
    }
    if(j==count)
        printf("抱歉!!!没有你所需要删除的学生信息!*_*!\n");
}
void yanshi(char *p)              //延时函数的定义
{
    while(1)
    {
        if(*p!=0)
            printf("%c",*p++);
        else
            break;
        Sleep(100);               //延时控制间断语句
    }
}
